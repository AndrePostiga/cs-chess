name: CI

on: [push]

env:
  RELEASE_VERSION: ${{ github.ref }}

jobs:
  # BuildAndLint:
  #   name: Build and Linting
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       python-version: [ "3.11" ]

  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Set up Python ${{ matrix.python-version }}
  #       uses: actions/setup-python@v4
  #       with:
  #        python-version: ${{ matrix.python-version }}

  #     - name: Install App Dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         if [ -f src/Application/requirements.txt ]; then pip install -r src/Application/requirements.txt; fi

  #     - name: Install Test Dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         if [ -f src/Tests/requirements.txt ]; then pip install -r src/Tests/requirements.txt; fi

  #     - name: Linting
  #       run: |
  #         # stop the build if there are Python syntax errors or undefined names
  #         ruff --format=github --select=E9,F63,F7,F82 --target-version=py37 .
  #         # default set of ruff rules with GitHub Annotations
  #         ruff --format=github --target-version=py37 .

  # UnitTests:
  #   name: Run Unit Tests
  #   needs: BuildAndLint
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       python-version: [ "3.11" ]

  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Set up Python ${{ matrix.python-version }}
  #       uses: actions/setup-python@v4
  #       with:
  #        python-version: ${{ matrix.python-version }}

  #     - name: Install Dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         if [ -f src/Tests/requirements.txt ]; then pip install -r src/Tests/requirements.txt; fi
  #         if [ -f src/Application/requirements.txt ]; then pip install -r src/Application/requirements.txt; fi

  #     - name: Test with pytest
  #       run: |
  #         pytest src/Tests --cov=./ --cov-report=xml:coverage-reports/coverage.xml --cov-branch --doctest-modules

  #     - name: Upload Artifact
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: code-cov-artifact
  #         path: coverage-reports/coverage.xml

  # SonarCloudScan:
  #   name: Scan With Sonar Cloud
  #   needs: UnitTests
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

  #     - uses: actions/download-artifact@v3
  #       with:
  #         name: code-cov-artifact
  #         path: coverage-reports/

  #     - name: Cat Code Cov
  #       run: |
  #         cat coverage-reports/coverage.xml

  #     - name: SonarCloud Scan
  #       uses: SonarSource/sonarcloud-github-action@master
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  GenerateReleaseDistPreview:
    name: Generate Release Preview Distribution
    #needs: SonarCloudScan
    runs-on: windows-latest
    if: contains(github.ref, 'release')
    strategy:
      matrix:
        python-version: [ "3.11" ]

    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install App Dependencies
        run: |
          python -m pip install --upgrade pip
          if (Test-Path "src\Application\requirements.txt") { pip install -r src\Application\requirements.txt }

      - name: Generate dist folder
        run: python src\Application\build_windows_script.py

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: compiled-game-artifact
          path: src\Application\dist
  
  CreateReleasePreview:
    name: Create Release Preview
    runs-on: ubuntu-latest
    needs: GenerateReleaseDistPreview
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: compiled-game-artifact
          path: dist/

      - name: Generate Tag Number
        run: echo VERSION=$(sed -E 's/.*\/([0-9]+\.[0-9]+\.[0-9]+)$/\1/' <<< $RELEASE_VERSION) >> $GITHUB_ENV

      - name: run
        run: ls
  
      - name: run dist
        run: ls dist

      - name: Create release preview
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/chess/*
          tag_name: ${{ env.VERSION }}
          name: Release Preview - ${{ env.VERSION }}
          body: This is a preview of the release ${{ env.VERSION }}.
          prerelease: true